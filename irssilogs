#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2010-2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import re
import sys
import datetime

0_0  # Python >= 3.6 is required

def fatal(msg):
    prog = argparse.ArgumentParser().prog
    print(f'{prog}: {msg}', file=sys.stderr)
    sys.exit(1)

def on_log_open(vars, timestamp):
    timestamp = datetime.datetime.strptime(timestamp, '%a %b %d %H:%M:%S %Y')
    vars.date = timestamp.date()
    vars.text += (timestamp, []),

def on_date_change(vars, date):
    timestamp = datetime.datetime.strptime(date, '%a %b %d %Y')
    vars.date = timestamp.date()

def on_start_talk(vars, stranger):
    vars.their_nicks.add(stranger)

def on_send(vars, time, text):
    date = vars.date
    line = f'{date} {time}\t>>\t{text}'
    vars.append_line(line)

def on_receive(vars, time, text):
    date = vars.date
    line = f'{date} {time}\t<<\t{text}'
    vars.append_line(line)

def on_msg(vars, time, nick, text):
    if nick in vars.my_nicks:
        action = on_send
    elif nick in vars.their_nicks:
        action = on_receive
    else:
        fatal(f'unknown nick: {nick}')
    action(vars, time, text)

def on_me(vars, time, text):
    date = vars.date
    line = f'{date} {time}\t**\t{text}'
    vars.append_line(line)

regexps = {
    r'^--- Log opened (?P<timestamp>.*)': on_log_open,
    r'^--- Log closed (?P<timestamp>.*)': None,
    r'^--- Day changed (?P<date>.*)': on_date_change,
    r'^(?P<time>[0-9:]{5}) >> (?P<text>.*)': on_send,  # Jakub's theme
    r'^(?P<time>[0-9:]{5}) << (?P<text>.*)': on_receive,  # Jakub's theme
    r'^(?P<time>[0-9:]{5})  [*] (?P<text>.*)': on_me,
    r'^(?P<time>[0-9:]{5}) <(?P<nick>[^\s>]*)> (?P<text>.*)': on_msg,
    r'^[0-9:]{5} -!- Irssi: Starting query in [:.@\w]+ with (?P<stranger>\S+)': on_start_talk,
    r'^[0-9:]{5} -!- \S+ \[[\w~@.:-]+\] has quit ': None,
    r'^[0-9:]{5} -!- \S+ is now known as \S+$': None,
}

regexps = {re.compile(k): v for k, v in regexps.items()}

class Vars(object):
    date = None
    my_nicks = set()
    their_nicks = set()
    text = []

    def append_line(self, line):
        self.text[-1][1].append(line)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--my-nicks', nargs='+', metavar='NICK')
    options = ap.parse_args()
    vars = Vars()
    vars.my_nicks.update(options.my_nicks or ())
    for line in sys.stdin:
        for regexp, callback in regexps.items():
            m = regexp.match(line)
            if not m:
                continue
            if callback:
                callback(vars, **m.groupdict())
            break
        else:
            line = line.rstrip('\n')
            fatal(f'cannot parse line: {line}')
    for _, chunk in sorted(vars.text):
        if not chunk:
            continue
        print('\n'.join(chunk))

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
